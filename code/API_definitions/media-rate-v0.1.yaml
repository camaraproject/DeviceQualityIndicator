openapi: 3.0.3
info:
  title: Media Rate API
  version: "wip"
  x-camara-commonalities: 0.5
  description: |
    This is a media rate service API that allows application developers to retrieve
    the maximum media bit rate supported for a given device.

    # Introduction
      The Media Rate API allows an application developer to query the network
      for the maximum supported media bit rate for a specific end user device.
      This information helps developers ensure their media applications can provide
      optimal quality while using the current network connection.

    # API functionality

    Prerequisite: authorisation and authentication

    Usage:
      1. Request: POST `retrieve-max-media-rate`, passing device identification
         information such as IP address, phone number, or network access identifier.
      2. Response: The network will return the maximum media bit rate supported
         for the device along with the unit of measurement.

    # Usage in Media Streaming Applications

    This API can be integrated into media streaming applications to determine optimal
    video resolution for streaming. A typical workflow:

    1. Application client requests manifest file (DASH/HLS) from CDN server
    2. Application client calls Media Rate API to get maximum supported bit rate
    3. Based on the response, application selects appropriate media resolution from the manifest
    4. Application begins media streaming from CDN using the optimal resolution

    This approach ensures the best possible viewing experience while preventing buffering or quality issues.

    The diagram below illustrates how the Media Rate API is used in a typical media streaming application:

    ![Media Rate API Sequence Diagram](../../documentation/SupportingDocuments/media-rate-sequence-flow.png)

    # Token usage: two-legged vs three-legged

    This API supports two types of access tokens:

    - **Two-legged token**: Used for server-to-server calls. The device to be queried MUST be identified by providing the `device` object in the request body.
    - **Three-legged token**: Used for user-authenticated calls. The device is identified from the access token itself, and the `device` object MUST NOT be provided in the request.

    If a two-legged token is used and the device object is missing, the API will return a `422 MISSING_IDENTIFIER` error.
    If a three-legged token is used and the device object is provided, the API will return a `422 UNNECESSARY_IDENTIFIER` error.

    This approach ensures clarity and security in device identification, and aligns with CAMARA API standards.

    # Authorization and authentication

    The "Camara Security and Interoperability Profile" provides details of how an API consumer requests an access token. Please refer to Identity and Consent Management (https://github.com/camaraproject/IdentityAndConsentManagement/) for the released version of the profile.

    The specific authorization flows to be used will be agreed upon during the onboarding process, happening between the API consumer and the API provider, taking into account the declared purpose for accessing the API, whilst also being subject to the prevailing legal framework dictated by local legislation.

    In cases where personal data is processed by the API and users can exercise their rights through mechanisms such as opt-in and/or opt-out, the use of three-legged access tokens is mandatory. This ensures that the API remains in compliance with privacy regulations, upholding the principles of transparency and user-centric privacy-by-design.

    # Identifying the device from the access token

    This API requires the API consumer to identify a device as the subject of the API as follows:
    - When the API is invoked using a two-legged access token, the subject will be identified from the device object, which therefore MUST be provided.

    - When a three-legged access token is used however, this optional identifier MUST NOT be provided, as the subject will be uniquely identified from the access token.

    This approach simplifies API usage for API consumers using a three-legged access token to invoke the API by relying on the information that is associated with the access token and was identified during the authentication process.

  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

externalDocs:
  description: Product documentation
  url: https://github.com/camaraproject/MediaRate

servers:
  - url: "{apiRoot}/media-rate/wip"
    variables:
      apiRoot:
        default: http://localhost:8087
        description: |
          API root, defined by service provider, e.g.
          `api.example.com` or `api.example.com/somepath`

tags:
  - name: Media Rate
    description: |
      Retrieve the maximum media bit rate supported for a given device.

paths:
  /retrieve-max-media-rate:
    post:
      security:
        - openId:
            - media-rate:retrieve
      tags:
        - Media Rate
      summary: Get maximum media rate
      description: |
        Retrieve the maximum media rate for a device. This helps application
        developers determine the optimal media quality settings for their applications.

        When using a two-legged token, the device object MUST be provided.
        When using a three-legged token, the device object MUST NOT be provided as
        the device information will be extracted from the token.
      operationId: retrieveMaxMediaRate
      parameters:
        - name: x-correlator
          in: header
          required: false
          description: Correlation id passed by client for request tracing
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]{0,55}$
      requestBody:
        description: Device information needed to determine media rate capabilities.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Device"
        required: true
      responses:
        "200":
          description: OK
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MediaRateResponse"
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"
        "422":
          $ref: "#/components/responses/Generic422"
        "429":
          $ref: "#/components/responses/Generic429"
        "500":
          $ref: "#/components/responses/Generic500"

components:
  securitySchemes:
    openId:
      type: openIdConnect
      description: |
        Common security scheme for all CAMARA APIs.

        Two types of tokens can be used with this API:

        1. Two-legged token: Used for server-to-server calls where the device
           information MUST be included in the request body.

        2. Three-legged token: Used for user-authenticated calls where the device
           information is extracted from the token itself. In this case, the
           device object MUST NOT be included in the request.

        The specific authorization flows to be used will be agreed upon during
        the onboarding process between the API consumer and the API provider.
      openIdConnectUrl: https://example.com/.well-known/openid-configuration

  headers:
    x-correlator:
      description: |
        Correlation ID for tracing requests across different services.
        This header is used to track a request as it flows through the system,
        allowing for better debugging and monitoring capabilities.

        The header should be propagated in all API responses and in any
        asynchronous callbacks related to the original request.
      schema:
        type: string
        pattern: ^[a-zA-Z0-9-]{0,55}$
        example: "4cfe2c3e-da83-4c17-8339-32b7c17f0633"

  schemas:
    Device:
      description: |
        End-user equipment able to connect to a mobile network. Examples of
        devices include smartphones or IoT sensors/actuators.

        The developer can choose to provide the below specified device
        identifiers:

        * `ipv4Address`
        * `ipv6Address`
        * `phoneNumber`
        * `networkAccessIdentifier`

        NOTE1: the MNO might support only a subset of these options. The
        API invoker can provide multiple identifiers to be compatible across
        different MNOs. In this case the identifiers MUST belong to the same
        device.
        NOTE2: for the Commonalities release v0.4, we are enforcing that the
        networkAccessIdentifier is only part of the schema for future-proofing,
        and CAMARA does not currently allow its use. After the CAMARA
        meta-release work is concluded and the relevant issues are resolved,
        its use will need to be explicitly documented in the guidelines.
      type: object
      properties:
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        networkAccessIdentifier:
          $ref: "#/components/schemas/NetworkAccessIdentifier"
        ipv4Address:
          $ref: "#/components/schemas/DeviceIpv4Addr"
        ipv6Address:
          $ref: "#/components/schemas/DeviceIpv6Address"
      minProperties: 1

    NetworkAccessIdentifier:
      description: |
        A public identifier addressing a subscription in a mobile network. In
        3GPP terminology, it corresponds to the GPSI formatted with the
        External Identifier ({Local Identifier}@{Domain Identifier}). Unlike
        the telephone number, the network access identifier is not subjected
        to portability ruling in force, and is individually managed by each
        operator.
      type: string
      example: "123456789@domain.com"

    PhoneNumber:
      description: |
        A public identifier addressing a telephone subscription. In mobile
        networks it corresponds to the MSISDN (Mobile Station International
        Subscriber Directory Number). In order to be globally unique it has to
        be formatted in international format, according to E.164 standard,
        optionally prefixed with '+'.
      type: string
      pattern: '^\+?[0-9]{5,15}$'
      example: "123456789"

    DeviceIpv4Addr:
      type: object
      description: |
        The device should be identified by either the public (observed) IP
        address and port as seen by the application server, or the private
        (local) and any public (observed) IP addresses in use by the device
        (this information can be obtained by various means, for example from
        some DNS servers).

        If the allocated and observed IP addresses are the same (i.e. NAT is
        not in use) then the same address should be specified for both
        publicAddress and privateAddress.

        If NAT64 is in use, the device should be identified by its
        publicAddress and publicPort, or separately by its allocated IPv6
        address (field ipv6Address of the Device object)

        In all cases, publicAddress must be specified, along with at least one
        of either privateAddress or publicPort, dependent upon which is known.
        In general, mobile devices cannot be identified by their public IPv4
        address alone.
      properties:
        publicAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        privateAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        publicPort:
          $ref: "#/components/schemas/Port"
      anyOf:
        - required: [publicAddress, privateAddress]
        - required: [publicAddress, publicPort]
      example: {"publicAddress": "84.125.93.10", "publicPort": 59765}

    SingleIpv4Addr:
      description: A single IPv4 address with no subnet mask
      type: string
      format: ipv4
      example: "84.125.93.10"

    DeviceIpv6Address:
      description: |
        The device should be identified by the observed IPv6 address, or by any
        single IPv6 address from within the subnet allocated to the device
        (e.g. adding ::0 to the /64 prefix).
      type: string
      format: ipv6
      example: 2001:db8:85a3:8d3:1319:8a2e:370:7344

    Port:
      description: TCP or UDP port number
      type: integer
      minimum: 0
      maximum: 65535

    MediaRateResponse:
      type: object
      description: The maximum media bit rate supported for the device.
      properties:
        maxMediaBitRateSupported:
          type: integer
          description: The maximum bit rate supported for the device
          example: 10
          format: int32
          minimum: 0
          maximum: 1024
        unit:
          type: string
          description: The unit of the bit rate (e.g., Mbps, Kbps)
          example: "Mbps"
          enum:
            - bps
            - kbps
            - Mbps
            - Gbps
            - Tbps
      required:
        - maxMediaBitRateSupported
        - unit

    ErrorInfo:
      type: object
      description: Error information
      required:
        - status
        - code
        - message
      properties:
        status:
          type: integer
          description: HTTP status code returned along with this error response
        code:
          type: string
          description: Code given to this error
        message:
          type: string
          description: Detailed error description

  responses:
    Generic400:
      description: Bad Request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            INVALID_ARGUMENT:
              description: Invalid argument. Generic syntax exception.
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: Invalid argument
    Generic401:
      description: Unauthorized
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            UNAUTHORIZED:
              description: Authentication information is missing or invalid
              value:
                status: 401
                code: UNAUTHORIZED
                message: Authentication information is missing or invalid
    Generic403:
      description: Forbidden
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            FORBIDDEN:
              description: Not authorized to perform the requested operation
              value:
                status: 403
                code: FORBIDDEN
                message: Not authorized to perform the requested operation
    Generic404:
      description: Not Found
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            NOT_FOUND:
              description: The requested resource was not found
              value:
                status: 404
                code: NOT_FOUND
                message: The requested resource was not found
    Generic422:
      description: Unprocessable Entity
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            MISSING_IDENTIFIER:
              description: The subject could not be identified from the access token and the device object was not provided
              value:
                status: 422
                code: MISSING_IDENTIFIER
                message: The subject could not be identified
            UNNECESSARY_IDENTIFIER:
              description: The subject could be identified from the access token but the device object was also provided
              value:
                status: 422
                code: UNNECESSARY_IDENTIFIER
                message: Device object should not be provided when using a three-legged token
    Generic429:
      description: Too Many Requests
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            TOO_MANY_REQUESTS:
              description: Rate limit exceeded
              value:
                status: 429
                code: TOO_MANY_REQUESTS
                message: Rate limit exceeded
    Generic500:
      description: Internal Server Error
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            INTERNAL_SERVER_ERROR:
              description: An unexpected error occurred
              value:
                status: 500
                code: INTERNAL_SERVER_ERROR
                message: An unexpected error occurred
